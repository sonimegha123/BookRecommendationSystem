# -*- coding: utf-8 -*-
"""BookRecommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11mkY2JnkqO1c0gfLNNo-hOItAjYONJY4
"""

!pip install requests
!pip install faiss-gpu
!pip install openai

import pandas as pd
import numpy as np
import openai

df = pd.read_csv("/content/books.csv")
df.head()

# Features used while recommending
# title, authors, categories, description, publish_year, average_rating

def textual_representation(row):
  textual_representation = f"""Title: {row['title']}
  Authors: {row['authors']}
  Category: {row['categories']}
  Description: {row['description']}
  Year: {row['published_year']}
  Rating: {row['average_rating']}
  Pages: {row['num_pages']}
  """
  return textual_representation

print(df.iloc[:5].apply(textual_representation, axis=1).values[0])

df['textual_representation'] = df.apply(textual_representation, axis=1)

import faiss
import requests

openai.api_key = ""

dim = 1536

index = faiss.IndexFlatL2(dim)

X = np.zeros((len(df['textual_representation']), dim), dtype = 'float32')

def get_openai_embedding(text, model="text-embedding-ada-002"):
    text = text.replace("\n", " ")  # Clean the text input
    response = openai.embeddings.create(input=[text], model=model)

    # Extract the embedding from the response
    embedding = response.data[0].embedding
    return np.array(embedding, dtype='float32')

for i, representation in enumerate(df['textual_representation']):
  embedding = get_openai_embedding(representation)

  # Add embedding to the FAISS index
  index.add(np.array([embedding], dtype='float32'))

  # Also store it in the numpy array if you need to manipulate or use it later
  X[i] = embedding

# index.add(X)

faiss.write_index(index, 'index')

index = faiss.read_index('index')

df[df.title.str.contains('Friends')]

favorite_book = df.iloc[4533]
print(favorite_book['textual_representation'])

# Now I want to find similar books, so first i'll embed fav book and then find similar embeddings in vector space

embedding = get_openai_embedding(favorite_book['textual_representation'])

embedding_reshaped = np.array([embedding], dtype='float32')

k = 5  # Number of nearest neighbors to retrieve
distances, indices = index.search(embedding_reshaped, k)

# Print the results
print(f"Top {k} similar entries:")
for i in range(k):
    similar_index = indices[0][i]
    similar_distance = distances[0][i]

    # Check if the index is within the valid range of the DataFrame
    if similar_index < len(df):
        similar_text = df.iloc[similar_index]['textual_representation']
        print(f"Index: {similar_index}, Distance: {similar_distance}, Text: {similar_text}")
    else:
        print(f"Index {similar_index} is out of bounds.")

print(f"Number of embeddings in FAISS index: {index.ntotal}")
print(f"Number of rows in DataFrame: {len(df)}")
